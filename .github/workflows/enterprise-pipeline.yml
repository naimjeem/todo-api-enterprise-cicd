name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/todo-api

jobs:
  # Quality Gate 1: Code Quality & Security (SAST)
  code-quality:
    name: Code Quality & Security (SAST)
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run Security Audit
        run: |
          npm audit --audit-level=high
        continue-on-error: true

      - name: Run SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: "QUALITY GATE: Check for HIGH severity vulnerabilities"
        run: |
          # Check npm audit for HIGH severity issues
          $auditResult = npm audit --audit-level=high --json | ConvertFrom-Json
          $highVulns = $auditResult.vulnerabilities | Where-Object { $_.severity -eq "high" }
          if ($highVulns.Count -gt 0) {
            Write-Host "❌ QUALITY GATE FAILED: HIGH severity vulnerabilities found!"
            $highVulns | ForEach-Object { Write-Host "  - $($_.name): $($_.title)" }
            exit 1
          }
          Write-Host "✅ QUALITY GATE PASSED: No HIGH severity vulnerabilities found"

  # Quality Gate 2: Unit & Integration Testing
  test:
    name: Unit & Integration Testing
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start PostgreSQL with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d postgres-test
          Start-Sleep -Seconds 10

      - name: Wait for PostgreSQL
        run: |
          $maxAttempts = 30
          $attempt = 0
          do {
            try {
              $connection = New-Object System.Data.SqlClient.SqlConnection("Server=localhost;Port=5432;Database=postgres;User Id=postgres;Password=password;")
              $connection.Open()
              $connection.Close()
              Write-Host "PostgreSQL is ready"
              break
            } catch {
              $attempt++
              Write-Host "Waiting for PostgreSQL... (attempt $attempt/$maxAttempts)"
              Start-Sleep -Seconds 2
            }
          } while ($attempt -lt $maxAttempts)

      - name: Run database migrations
        run: |
          docker-compose -f docker-compose.test.yml exec -T postgres-test psql -U postgres -d todo_test_db -c "SELECT 1;"

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          TEST_DATABASE_URL: postgresql://postgres:password@localhost:5432/todo_test_db

      - name: Run integration tests
        run: npm run test:integration
        env:
          TEST_DATABASE_URL: postgresql://postgres:password@localhost:5432/todo_test_db

      - name: "QUALITY GATE: Check unit test coverage > 85%"
        run: |
          $coverageOutput = npm run test:coverage -- --coverageReporters=text-summary
          $coverageLine = $coverageOutput | Select-String "All files"
          if ($coverageLine) {
            $coverage = [regex]::Match($coverageLine.Line, '(\d+\.?\d*)%').Groups[1].Value
            Write-Host "Coverage: ${coverage}%"
            if ([double]$coverage -lt 85) {
              Write-Host "❌ QUALITY GATE FAILED: Coverage ${coverage}% is below 85% threshold"
              exit 1
            }
            Write-Host "✅ QUALITY GATE PASSED: Coverage ${coverage}% meets 85% threshold"
          } else {
            Write-Host "❌ QUALITY GATE FAILED: Could not determine coverage percentage"
            exit 1
          }

      - name: Cleanup PostgreSQL container
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Quality Gate 3: Build & Containerization
  build:
    name: Build & Containerization
    runs-on: self-hosted
    needs: [code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Quality Gate 4: Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: self-hosted
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install k6
        run: |
          $k6Url = "https://github.com/grafana/k6/releases/latest/download/k6-v0.47.0-windows-amd64.zip"
          $k6Zip = "k6.zip"
          Invoke-WebRequest -Uri $k6Url -OutFile $k6Zip -UseBasicParsing
          Expand-Archive -Path $k6Zip -DestinationPath "C:\k6" -Force
          $env:PATH += ";C:\k6"

      - name: Start application
        run: |
          docker run -d --name todo-api-test \
            -p 3000:3000 \
            -e NODE_ENV=test \
            -e DATABASE_URL=postgresql://postgres:password@host.docker.internal:5432/todo_db \
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Wait for application to be ready
        run: |
          for ($i = 1; $i -le 30; $i++) {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:3000/health" -UseBasicParsing
              if ($response.StatusCode -eq 200) {
                Write-Host "Application is ready"
                break
              }
            } catch {
              Write-Host "Waiting for application... ($i/30)"
              Start-Sleep -Seconds 10
            }
          }

      - name: Run performance tests
        run: |
          k6 run tests/performance/load-test.js --out json=performance-results.json
        env:
          BASE_URL: http://localhost:3000

      - name: "QUALITY GATE: Check P95 response time < 200ms"
        run: |
          if (Test-Path "performance-results.json") {
            $results = Get-Content "performance-results.json" | ConvertFrom-Json
            $p95Time = $results.metrics.http_req_duration.values.p95
            Write-Host "P95 Response Time: ${p95Time}ms"
            if ($p95Time -gt 200) {
              Write-Host "❌ QUALITY GATE FAILED: P95 response time ${p95Time}ms exceeds 200ms threshold"
              exit 1
            }
            Write-Host "✅ QUALITY GATE PASSED: P95 response time ${p95Time}ms meets 200ms threshold"
          } else {
            Write-Host "❌ QUALITY GATE FAILED: Performance results file not found"
            exit 1
          }

      - name: Cleanup
        if: always()
        run: docker rm -f todo-api-test

  # Quality Gate 5: Security Scanning (Container)
  container-scan:
    name: Security Scanning (Container)
    runs-on: self-hosted
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for security scan
        run: |
          docker build -t todo-api:security-scan .

      - name: Run Docker security scan
        run: |
          # Simple Docker security check using docker scout
          Write-Host "Running Docker security scan..."
          docker scout cves todo-api:security-scan --only-severities high,critical --exit-code
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ No HIGH/CRITICAL vulnerabilities found"
          } else {
            Write-Host "❌ HIGH/CRITICAL vulnerabilities found"
            exit 1
          }

      - name: "QUALITY GATE: Check for HIGH/CRITICAL vulnerabilities"
        run: |
          Write-Host "✅ QUALITY GATE PASSED: Container security scan completed"

  # Quality Gate 6: Dependency Vulnerability Scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: self-hosted
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit with detailed output
        run: |
          npm audit --audit-level=moderate --json > audit-results.json
          $auditData = Get-Content audit-results.json | ConvertFrom-Json
          $highVulns = $auditData.vulnerabilities | Where-Object { $_.severity -eq "high" }
          if ($highVulns.Count -gt 0) {
            Write-Host "❌ QUALITY GATE FAILED: HIGH severity vulnerabilities found:"
            $highVulns | ForEach-Object { Write-Host "  - $($_.name): $($_.title)" }
            exit 1
          }
          Write-Host "✅ QUALITY GATE PASSED: No HIGH severity vulnerabilities found"

  # Deploy to Staging (for develop branch)
  deploy-to-staging:
    name: Deploy to Staging
    runs-on: self-hosted
    needs: [performance-test, container-scan, dependency-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          if (Get-Command docker-compose -ErrorAction SilentlyContinue) {
            Write-Host "Docker Compose is already installed"
          } else {
            $dockerComposeUrl = "https://github.com/docker/compose/releases/latest/download/docker-compose-Windows-x86_64.exe"
            $dockerComposePath = "$env:ProgramFiles\Docker\Docker\resources\bin\docker-compose.exe"
            Invoke-WebRequest -Uri $dockerComposeUrl -OutFile $dockerComposePath
          }

      - name: Create environment file
        run: |
          echo "DOCKER_IMAGE=${{ env.IMAGE_NAME }}:${{ github.sha }}" > .env.staging
          echo "POSTGRES_PASSWORD=staging_password_$(Get-Random -Maximum 99999999)" >> .env.staging
          echo "ALLOWED_ORIGINS=https://staging-todo-api.example.com" >> .env.staging

      - name: Deploy to staging
        run: |
          docker-compose -f docker-compose.staging.yml --env-file .env.staging up -d
          $timeout = 300
          $elapsed = 0
          do {
            $status = docker-compose -f docker-compose.staging.yml ps
            if ($status -match "healthy") {
              Write-Host "Services are healthy"
              break
            }
            Start-Sleep -Seconds 5
            $elapsed += 5
          } while ($elapsed -lt $timeout)

  # Quality Gate 7: Smoke Tests
  staging-smoke-tests:
    name: Smoke Tests
    runs-on: self-hosted
    needs: [deploy-to-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        run: npm run test -- tests/smoke/
        env:
          BASE_URL: ${{ secrets.STAGING_URL }}

      - name: "QUALITY GATE: Health check"
        run: |
          try {
            $response = Invoke-WebRequest -Uri "${{ secrets.STAGING_URL }}/health" -UseBasicParsing
            if ($response.StatusCode -eq 200) {
              Write-Host "✅ QUALITY GATE PASSED: Health check passed"
            } else {
              Write-Host "❌ QUALITY GATE FAILED: Health check failed"
              exit 1
            }
          } catch {
            Write-Host "❌ QUALITY GATE FAILED: Health check failed"
            exit 1
          }

      - name: "QUALITY GATE: API functionality test"
        run: |
          # Test GET /tasks
          try {
            $response = Invoke-WebRequest -Uri "${{ secrets.STAGING_URL }}/tasks" -UseBasicParsing
            if ($response.StatusCode -eq 200) {
              Write-Host "✅ GET /tasks test passed"
            } else {
              Write-Host "❌ QUALITY GATE FAILED: GET /tasks test failed"
              exit 1
            }
          } catch {
            Write-Host "❌ QUALITY GATE FAILED: GET /tasks test failed"
            exit 1
          }
          
          # Test POST /tasks
          $body = @{
            title = "Smoke Test Task"
            description = "Smoke test"
            priority = "medium"
          } | ConvertTo-Json
          
          try {
            $response = Invoke-WebRequest -Uri "${{ secrets.STAGING_URL }}/tasks" -Method POST -Body $body -ContentType "application/json" -UseBasicParsing
            $taskData = $response.Content | ConvertFrom-Json
            $taskId = $taskData.task.id
            
            if ($taskId -and $taskId -ne "null") {
              Write-Host "✅ QUALITY GATE PASSED: POST /tasks test passed"
            } else {
              Write-Host "❌ QUALITY GATE FAILED: POST /tasks test failed"
              exit 1
            }
          } catch {
            Write-Host "❌ QUALITY GATE FAILED: POST /tasks test failed"
            exit 1
          }

  # Deploy to Production (for main branch)
  deploy-to-production:
    name: Deploy to Production
    runs-on: self-hosted
    needs: [staging-smoke-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          if (Get-Command docker-compose -ErrorAction SilentlyContinue) {
            Write-Host "Docker Compose is already installed"
          } else {
            $dockerComposeUrl = "https://github.com/docker/compose/releases/latest/download/docker-compose-Windows-x86_64.exe"
            $dockerComposePath = "$env:ProgramFiles\Docker\Docker\resources\bin\docker-compose.exe"
            Invoke-WebRequest -Uri $dockerComposeUrl -OutFile $dockerComposePath
          }

      - name: Create environment file
        run: |
          echo "DOCKER_IMAGE=${{ env.IMAGE_NAME }}:${{ github.sha }}" > .env.production
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.production
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.production
          echo "ALLOWED_ORIGINS=https://todo-api.example.com" >> .env.production
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env.production

      - name: Deploy to production
        run: |
          docker-compose -f docker-compose.production.yml --env-file .env.production up -d --scale todo-api-production=0
          docker-compose -f docker-compose.production.yml --env-file .env.production up -d --scale todo-api-production=2
          
          $timeout = 300
          $elapsed = 0
          do {
            $status = docker-compose -f docker-compose.production.yml ps
            if ($status -match "healthy") {
              Write-Host "Services are healthy"
              break
            }
            Start-Sleep -Seconds 5
            $elapsed += 5
          } while ($elapsed -lt $timeout)