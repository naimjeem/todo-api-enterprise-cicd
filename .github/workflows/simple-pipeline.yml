name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  release:
    types: [published]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/todo-api

jobs:
  test:
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test

  code-quality:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Check for security vulnerabilities
        run: npm audit --audit-level=high

  build:
    runs-on: self-hosted
    needs: [test, code-quality]
    if: always() && needs.code-quality.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set Image Tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          fi
      - name: Build & Push Todo API
        run: |
          docker build -t $IMAGE_NAME:${{ env.IMAGE_TAG }} .
          docker push $IMAGE_NAME:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set Image Tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          fi
      - name: Update docker-compose.yml with new image
        run: |
          echo "Updating docker-compose.yml with image: $IMAGE_NAME:${{ env.IMAGE_TAG }}"
          # Update the image in docker-compose.yml for production service
          (Get-Content docker-compose.yml) -replace 'image: .*todo-api.*', "image: $IMAGE_NAME:${{ env.IMAGE_TAG }}" | Set-Content docker-compose.yml
          echo "Updated docker-compose.yml:"
          Get-Content docker-compose.yml | Select-String "image:"
      - name: Deploy with Docker Compose
        run: |
          docker-compose pull
          docker-compose up -d